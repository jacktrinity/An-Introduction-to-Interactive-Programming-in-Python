Question 1
What is the type of the parameter for a mouseclick handler?
- Tuple, More specifically, a tuple (pair) of non-negative integers

Question 2
Which of the following expression mutate, i.e., change, list my_list?
- my_list.reverse()
- my_list.extend([10, 20])
- my_list.append(10)

Question 3
We want to remove the element at the front of a list. For example, we want the following code to print "apple" and ["pear", "blueberry"], respectively.
What function or method call should replace the question marks?

fruits = ["apple", "pear", "blueberry"]
fruit = ???
print fruit, fruits

- fruits.pop(0)

Question 4
Which of the following used of range() will generate the list [2, 5, 8, 11, 14]?
- range(2, 16, 3)

Question 5
To correctly compute the product of a list numbers of numbers, what statement should replace the question marks?

numbers = â€¦
???
for n in numbers:
    product *= n
    
- product = 1    

Question 6
We can loop over strings, too!
The following incompete function is a simple, but inefficient, way to reverse a string.
What line of code needs to replace the question marks for the code to work correctly?

def reverse_string(s):
    """Returns the reversal of the given string."""
    ???
    for char in s:
        result = char + result
    return result

print reverse_string("hello")

- result = ""

Question 7
Imagine a game on a map. At the beginning, we might want to randomly assign each player a starting point.  
Which of the following expressions may we use in place of the question marks to correctly implement this functionality?

import random

def random_point():
    """Returns a random point on a 100x100 grid."""
    return (random.randrange(100), random.randrange(100))

def starting_points(players):
    """Returns a list of random points, one for each player."""
    points = []
    for player in players:
        point = random_point()
        ???
    return points
    
- points.append(point)

Question 8 
The following functions is supposed to check whether the given list of numbers is in ascending order.
For example, we want is_ascending([2, 6, 9, 12, 400]) to return True while is_ascending([4, 8, 2, 13]) should return False.

def is_ascending(numbers):
    """Returns whether the given list of numbers is in ascending order."""
    for i in range(len(numbers)):
        if numbers[i+1] < numbers[i]:
            return False
    return True
    
However, the function doesn't quite work. Try it on the suggested tests to verify this for yourself. The easiest fix is to make a small change to the highlighted code.  
What should it be replaced with? 

- range(len(numbers) - 1)
  Note that here we loop not over numbers, but over a new list, a range of indices. 
  This function used that approach because it looks at two elements of numbers on each iteration.
  
Question 9
Turn the following English description into code:
1. Create a list with two numbers, 0 and 1, respectively.
2. For 40 times, add the end of the list the sum of the last two numbers.

What is the last number of in the list?
- 165580141

x = 0
y = 1

for i in range(40):
    x, y = y, x + y

print y
