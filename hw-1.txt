Week 1 of "An Introduction to Interactive Programming in Python"

Question 1
An if statement can have how many elif parts?
- Unlimited, i.e., 0 or more

Question 2
Consider the Boolean expression not (p or not q). Give the four following values in order, separated only by spaces:

the value of the expression when p is True, and q is True,
the value of the expression when p is True, and q is False,
the value of the expression when p is False, and q is True,
the value of the expression when p is False, and q is False,

Remember, each of the four results you provide should be True or False with the proper capitalization.
- False False True False

Question 3
A common error for beginning programmers is to confuse the behavior of print statements and return statements.

As an example to illustrate these points, consider the following piece of code:
def do_stuff():
    print "Hello world"
    return "Is it over yet?"
    print "Goodbye cruel world!"

print do_stuff()

Which of the following is the console output that results from executing this piece of code
- Hello world
  Is it over yet?
  
Question 4
Given a non-negative integer n, which of the following expressions computes the ten's digit of n? For example, if n is 123, then we want the expression to evaluate to 2.
- (n // 10) % 10
- (n % 100 - n % 10) / 10

Question 5
The function calls random.randint(0, 10) and random.randrange(0, 10) generate random numbers in different ranges. 
What number can be generated by one of these functions, but not the other?
- 10

Question 6
Implement the mathematical function f(x) = -5x^5 + 69x^2 - 47 as a Python function.  
Then use Python to compute the function values f(0)f(0), f(1)f(1), f(2)f(2), and f(3)f(3). 
Enter the maximum of these four values calculated.
- 69

Question 7
When investing money, an important concept to know is compound interest.  
The equation FV = PV(1+rate)^periods relates the following four quantities.

The present value (PV) of your money is how much money you have now. 
The future value (FV) of your money is how much money you will have in the future.
The nominal interest rate per period (rate) is how much interest you earn during a particular length of time, before accounting for compounding. 
This is typically expressed as a percentage.
The number of periods (periods) is how many periods in the future this calculation is for.

Finish the following code, run it, and submit the printed number.  Provide at least four digits of precision after the decimal point.

def future_value(present_value, annual_rate, periods_per_year, years):
    rate_per_period = annual_rate / periods_per_year
    periods = periods_per_year * years

    # Put your code here.

print "$1000 at 2% compounded daily for 3 years yields $", future_value(1000, .02, 365, 3)
- 1061.834801125905

Question 8
There are several ways to calculate the area of a regular polygon. Given the number of sides, n, and the length of each side, s, the polygon's area is
(ns^2) / 4tan(x/n)
 
For example, a regular polygon with 5 sides, each of length 7 inches, has area 84.3033926289 square inches.

Write a function that calculates the area of a regular polygon, given the number of sides and length of each side.  Submit the area of a regular polygon with 7 sides each of length 3 inches.  Enter a number (and not the units) with at least four digits of precision after the decimal point.

Note that the use of inches as the unit of measurement in these examples is arbitrary.  Python only keeps track of the numerical values, not the units.
- 32.70521199601431

Question 9
Running the following program results in the error
SyntaxError: bad input on line 8 (’return’).

Which of the following describes the problem?

def max_of_2(a, b):
    if a > b:
        return a
    else:
        return b

def max_of_3(a, b, c):
return max_of_2(a, max_of_2(b, c))

- incorrect indentation , The body of the function definition for max_of_3() should be indented, but it is not.

Question 10
The following code has a number of syntactic errors in it. The intended math calculations are correct, so the only errors are syntactic. Fix the syntactic errors.

define project_to_distance(point_x point_y distance):
    dist_to_origin = math.square_root(pointx ** 2 + pointy ** 2)
     scale == distance / dist_to_origin
    print point_x * scale, point_y * scale

project-to-distance(2, 7, 4)

- 3.84609579056
